module RBS
  module Collection
    # This class represent the configration file.
    class Config
      PATH: Pathname

      type gemfile_lock = untyped

      type collection_entry = {
        'name' => String,
        'remote' => String,
        'revision' => String,
        'repo_dir' => String?
      }
      type gem_entry = {
        'name' => String,
        'version' => String?,
        'ignore' => boolish,
        'collection' => collection_entry?
      }

      class GemfileLockLoader
        attr_reader lock: Config?

        attr_reader gemfile_lock: gemfile_lock

        def initialize: (lock: Config? lock, gemfile_lock: gemfile_lock) -> untyped

        def load: (Config config) -> untyped

        def find_collection: (config: Config, gem_name: String) -> untyped

        def find_best_version: (version: String, versions: Array[String]) -> untyped
      end

      def self.generate_lockfile: (config_path: Pathname, gemfile_lock_path: Pathname, ?with_lockfile: boolish) -> Config

      def self.from_path: (Pathname path) -> Config

      def self.to_lockfile_path: (Pathname config_path) -> Pathname

      def initialize: (untyped data) -> void

      def add_gem: (untyped gem) -> untyped

      def gem: (String gem_name) -> untyped

      def path: () -> Pathname

      def collections: () -> Array[Collections::_Collection]

      def dump_to: (Pathname) -> void

      def gems: () -> Array[untyped]
    end
  end
end
